generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  userId            String              @unique @db.VarChar(100)
  nickname          String              @db.VarChar(100)
  password          String              @db.VarChar(100)
  cityId            Int
  districtId        Int
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now())
  city              City                @relation(fields: [cityId], references: [id])
  district          District            @relation(fields: [districtId], references: [id])
  districtInfo      DistrictInfo[]
  comment           Comment[]
  commentLiked      CommentLiked[]
  chat              Chat[]
  product           Product[]
  chatRoom          ChatRoom[]
  districtInfoLiked DistrictInfoLiked[]
  productInterested ProductInterested[]

  @@map("users")
}

model Product {
  id               Int                 @id @default(autoincrement())
  title            String              @db.VarChar(100)
  categoryId       Int
  cityId           Int
  districtId       Int
  userId           Int
  price            Decimal?
  description      String              @db.VarChar(100)
  viewCount        Int?
  purchaseDate     DateTime?
  createdAt        DateTime?           @default(now())
  updatedAt        DateTime?           @default(now())
  category         Category            @relation(fields: [categoryId], references: [id])
  city             City                @relation(fields: [cityId], references: [id])
  district         District            @relation(fields: [districtId], references: [id])
  user             User                @relation(fields: [userId], references: [id])
  productImage     ProductImage[]
  productIntrested ProductInterested[]
  chatRoom         ChatRoom[]

  @@map("products")
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique @db.VarChar(100)
  createdAt    DateTime? @default(now())
  product      Product[]

  @@map("categories")
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  productId Int
  imageUrl  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  product   Product   @relation(fields: [productId], references: [id])

  @@map("products_images")
}

model City {
  id           Int            @id @default(autoincrement())
  cityName     String         @unique
  createdAt    DateTime?      @default(now())
  product      Product[]
  user         User[]
  districtInfo DistrictInfo[]
  district     District[]

  @@map("cities")
}

model District {
  id           Int            @id @default(autoincrement())
  cityId       Int
  districtName String
  createdAt    DateTime?      @default(now())
  city         City           @relation(fields: [cityId], references: [id])
  product      Product[]
  user         User[]
  districtInfo DistrictInfo[]

  @@map("districts")
}

model ProductInterested {
  id        Int       @id @default(autoincrement())
  productId Int
  userId    Int
  createdAt DateTime? @default(now())
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("products_interested")
}

model DistrictInfo {
  id                Int                 @id @default(autoincrement())
  cityId            Int
  districtId        Int
  userId            Int
  title             String
  content           String
  viewCount         Int?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now())
  city              City                @relation(fields: [cityId], references: [id])
  district          District            @relation(fields: [districtId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  comment           Comment[]
  districtInfoLiked DistrictInfoLiked[]
  districtInfoImage DistrictInfoImage[]

  @@map("districts_infos")
}

model DistrictInfoImage {
  id        Int          @id @default(autoincrement())
  infoId    Int
  imageUrl  String
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @default(now())
  info      DistrictInfo @relation(fields: [infoId], references: [id])

  @@map("districts_infos_images")
}

model DistrictInfoLiked {
  id        Int          @id @default(autoincrement())
  infoId    Int
  userId    Int
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @default(now())
  info      DistrictInfo @relation(fields: [infoId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@map("districts_infos_liked")
}

model Comment {
  id           Int            @id @default(autoincrement())
  infoId       Int
  userId       Int
  comment      String
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @default(now())
  info         DistrictInfo   @relation(fields: [infoId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  commentLiked CommentLiked[]

  @@map("comments")
}

model CommentLiked {
  id        Int       @id @default(autoincrement())
  userId    Int
  commnetId Int
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id])
  comment   Comment   @relation(fields: [commnetId], references: [id])

  @@map("comments_liked")
}

model ChatRoom {
  id          Int       @id @default(autoincrement())
  productId   Int
  buyerId     Int
  lastVisitAt DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  buyer       User      @relation(fields: [buyerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  chat        Chat[]

  @@map("chat_rooms")
}

model Chat {
  id        Int       @id @default(autoincrement())
  roomId    Int
  userId    Int
  text      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id])
  room      ChatRoom  @relation(fields: [roomId], references: [id])

  @@map("chats")
}
